# 1
# Model Technology ModelSim - Intel FPGA Edition vlog 10.5b Compiler 2016.10 Oct  5 2016
# Start time: 09:36:56 on Mar 27,2024
# vlog -sv -timescale 1ps/1ps -work work -f sources.txt 
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling module instr_register_test
# -- Compiling module top
# 
# Top level modules:
# 	top
# End time: 09:36:56 on Mar 27,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vsim -novopt -quiet -nocoverage "+notimingchecks" "+nowarnTSCALE" -sva top -GWR_NR=30 -GRD_NR=30 -Gwrite_order=0 -Gread_order=1 
# Start time: 09:36:56 on Mar 27,2024
# ** Warning: (vsim-3017) ../lab01_testbench-interface/top.sv(37): [TFMPC] - Too few port connections. Expected 10, found 9.
#    Time: 0 ns  Iteration: 0  Instance: /top/dut File: ../lab_dut/instr_register.sv
# ** Warning: (vsim-3722) ../lab01_testbench-interface/top.sv(37): [TFMPC] - Missing connection for port 'rez'.
# 
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH.                 ***
# ***********************************************************
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# Test: opcode=1, operand_a=-12, operand_b=7 at time 36.
# Writing to register location 0: 
#   opcode = 1 (PASSA)
#   operand_a = -12
#   operand_b = 7
# 
# Test: opcode=0, operand_a=-9, operand_b=1 at time 46.
# Writing to register location 1: 
#   opcode = 0 (ZERO)
#   operand_a = -9
#   operand_b = 1
# 
# Test: opcode=7, operand_a=-15, operand_b=8 at time 56.
# Writing to register location 2: 
#   opcode = 7 (MOD)
#   operand_a = -15
#   operand_b = 8
# 
# Test: opcode=5, operand_a=-8, operand_b=7 at time 66.
# Writing to register location 3: 
#   opcode = 5 (MULT)
#   operand_a = -8
#   operand_b = 7
# 
# Test: opcode=3, operand_a=-9, operand_b=5 at time 76.
# Writing to register location 4: 
#   opcode = 3 (ADD)
#   operand_a = -9
#   operand_b = 5
# 
# Test: opcode=4, operand_a=5, operand_b=3 at time 86.
# Writing to register location 5: 
#   opcode = 4 (SUB)
#   operand_a = 5
#   operand_b = 3
# 
# Test: opcode=3, operand_a=3, operand_b=12 at time 96.
# Writing to register location 6: 
#   opcode = 3 (ADD)
#   operand_a = 3
#   operand_b = 12
# 
# Test: opcode=6, operand_a=12, operand_b=3 at time 106.
# Writing to register location 7: 
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 3
# 
# Test: opcode=1, operand_a=3, operand_b=14 at time 116.
# Writing to register location 8: 
#   opcode = 1 (PASSA)
#   operand_a = 3
#   operand_b = 14
# 
# Test: opcode=1, operand_a=-2, operand_b=9 at time 126.
# Writing to register location 9: 
#   opcode = 1 (PASSA)
#   operand_a = -2
#   operand_b = 9
# 
# Test: opcode=7, operand_a=9, operand_b=9 at time 136.
# Writing to register location 10: 
#   opcode = 7 (MOD)
#   operand_a = 9
#   operand_b = 9
# 
# Test: opcode=3, operand_a=9, operand_b=7 at time 146.
# Writing to register location 11: 
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 7
# 
# Test: opcode=5, operand_a=7, operand_b=3 at time 156.
# Writing to register location 12: 
#   opcode = 5 (MULT)
#   operand_a = 7
#   operand_b = 3
# 
# Test: opcode=7, operand_a=3, operand_b=5 at time 166.
# Writing to register location 13: 
#   opcode = 7 (MOD)
#   operand_a = 3
#   operand_b = 5
# 
# Test: opcode=0, operand_a=-11, operand_b=15 at time 176.
# Writing to register location 14: 
#   opcode = 0 (ZERO)
#   operand_a = -11
#   operand_b = 15
# 
# Test: opcode=6, operand_a=15, operand_b=0 at time 186.
# Writing to register location 15: 
#   opcode = 6 (DIV)
#   operand_a = 15
#   operand_b = 0
# 
# Test: opcode=4, operand_a=0, operand_b=14 at time 196.
# Writing to register location 16: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 14
# 
# Test: opcode=3, operand_a=-2, operand_b=4 at time 206.
# Writing to register location 17: 
#   opcode = 3 (ADD)
#   operand_a = -2
#   operand_b = 4
# 
# Test: opcode=0, operand_a=-12, operand_b=3 at time 216.
# Writing to register location 18: 
#   opcode = 0 (ZERO)
#   operand_a = -12
#   operand_b = 3
# 
# Test: opcode=4, operand_a=-13, operand_b=8 at time 226.
# Writing to register location 19: 
#   opcode = 4 (SUB)
#   operand_a = -13
#   operand_b = 8
# 
# Test: opcode=1, operand_a=-8, operand_b=12 at time 236.
# Writing to register location 20: 
#   opcode = 1 (PASSA)
#   operand_a = -8
#   operand_b = 12
# 
# Test: opcode=1, operand_a=-4, operand_b=1 at time 246.
# Writing to register location 21: 
#   opcode = 1 (PASSA)
#   operand_a = -4
#   operand_b = 1
# 
# Test: opcode=1, operand_a=-15, operand_b=1 at time 256.
# Writing to register location 22: 
#   opcode = 1 (PASSA)
#   operand_a = -15
#   operand_b = 1
# 
# Test: opcode=7, operand_a=1, operand_b=1 at time 266.
# Writing to register location 23: 
#   opcode = 7 (MOD)
#   operand_a = 1
#   operand_b = 1
# 
# Test: opcode=5, operand_a=1, operand_b=15 at time 276.
# Writing to register location 24: 
#   opcode = 5 (MULT)
#   operand_a = 1
#   operand_b = 15
# 
# Test: opcode=7, operand_a=-1, operand_b=5 at time 286.
# Writing to register location 25: 
#   opcode = 7 (MOD)
#   operand_a = -1
#   operand_b = 5
# 
# Test: opcode=4, operand_a=5, operand_b=7 at time 296.
# Writing to register location 26: 
#   opcode = 4 (SUB)
#   operand_a = 5
#   operand_b = 7
# 
# Test: opcode=4, operand_a=-9, operand_b=4 at time 306.
# Writing to register location 27: 
#   opcode = 4 (SUB)
#   operand_a = -9
#   operand_b = 4
# 
# Test: opcode=5, operand_a=4, operand_b=12 at time 316.
# Writing to register location 28: 
#   opcode = 5 (MULT)
#   operand_a = 4
#   operand_b = 12
# 
# Test: opcode=3, operand_a=12, operand_b=5 at time 326.
# Writing to register location 29: 
#   opcode = 3 (ADD)
#   operand_a = 12
#   operand_b = 5
# 
# 
# Reading back the same register locations written...
# Read from register location 12: 
#   opcode = 5 (MULT)
#   operand_a = 7
#   operand_b = 3
#   result = 21
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 7 and 3 is correct!
# 
# Read from register location 24: 
#   opcode = 5 (MULT)
#   operand_a = 1
#   operand_b = 15
#   result = 15
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 1 and 15 is correct!
# 
# Read from register location 10: 
#   opcode = 7 (MOD)
#   operand_a = 9
#   operand_b = 9
#   result = 0
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 9 and 9 is correct!
# 
# Read from register location 2: 
#   opcode = 7 (MOD)
#   operand_a = -15
#   operand_b = 8
#   result = -7
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -15 and 8 is correct!
# 
# Read from register location 14: 
#   opcode = 0 (ZERO)
#   operand_a = -11
#   operand_b = 15
#   result = 0
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -11 and 15 is correct!
# 
# Read from register location 9: 
#   opcode = 1 (PASSA)
#   operand_a = -2
#   operand_b = 9
#   result = -2
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -2 and 9 is correct!
# 
# Read from register location 12: 
#   opcode = 5 (MULT)
#   operand_a = 7
#   operand_b = 3
#   result = 21
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 7 and 3 is correct!
# 
# Read from register location 23: 
#   opcode = 7 (MOD)
#   operand_a = 1
#   operand_b = 1
#   result = 0
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 1 and 1 is correct!
# 
# Read from register location 17: 
#   opcode = 3 (ADD)
#   operand_a = -2
#   operand_b = 4
#   result = 2
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -2 and 4 is correct!
# 
# Read from register location 13: 
#   opcode = 7 (MOD)
#   operand_a = 3
#   operand_b = 5
#   result = 3
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 3 and 5 is correct!
# 
# Read from register location 22: 
#   opcode = 1 (PASSA)
#   operand_a = -15
#   operand_b = 1
#   result = -15
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -15 and 1 is correct!
# 
# Read from register location 3: 
#   opcode = 5 (MULT)
#   operand_a = -8
#   operand_b = 7
#   result = -56
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -8 and 7 is correct!
# 
# Read from register location 11: 
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 7
#   result = 16
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 9 and 7 is correct!
# 
# Read from register location 1: 
#   opcode = 0 (ZERO)
#   operand_a = -9
#   operand_b = 1
#   result = 0
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -9 and 1 is correct!
# 
# Read from register location 15: 
#   opcode = 6 (DIV)
#   operand_a = 15
#   operand_b = 0
#   result = x
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# ** Error: The value is incorrect, 15 and 0 should be 0!
#    Time: 494 ns  Scope: top.test.check_result File: ../lab01_testbench-interface/instr_register_test.sv Line: 203
# Read from register location 13: 
#   opcode = 7 (MOD)
#   operand_a = 3
#   operand_b = 5
#   result = 3
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 3 and 5 is correct!
# 
# Read from register location 17: 
#   opcode = 3 (ADD)
#   operand_a = -2
#   operand_b = 4
#   result = 2
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -2 and 4 is correct!
# 
# Read from register location 15: 
#   opcode = 6 (DIV)
#   operand_a = 15
#   operand_b = 0
#   result = x
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# ** Error: The value is incorrect, 15 and 0 should be 0!
#    Time: 524 ns  Scope: top.test.check_result File: ../lab01_testbench-interface/instr_register_test.sv Line: 203
# Read from register location 0: 
#   opcode = 1 (PASSA)
#   operand_a = -12
#   operand_b = 7
#   result = -12
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -12 and 7 is correct!
# 
# Read from register location 22: 
#   opcode = 1 (PASSA)
#   operand_a = -15
#   operand_b = 1
#   result = -15
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -15 and 1 is correct!
# 
# Read from register location 15: 
#   opcode = 6 (DIV)
#   operand_a = 15
#   operand_b = 0
#   result = x
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# ** Error: The value is incorrect, 15 and 0 should be 0!
#    Time: 554 ns  Scope: top.test.check_result File: ../lab01_testbench-interface/instr_register_test.sv Line: 203
# Read from register location 11: 
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 7
#   result = 16
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 9 and 7 is correct!
# 
# Read from register location 29: 
#   opcode = 3 (ADD)
#   operand_a = 12
#   operand_b = 5
#   result = 17
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 12 and 5 is correct!
# 
# Read from register location 7: 
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 3
#   result = 4
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 12 and 3 is correct!
# 
# Read from register location 13: 
#   opcode = 7 (MOD)
#   operand_a = 3
#   operand_b = 5
#   result = 3
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 3 and 5 is correct!
# 
# Read from register location 24: 
#   opcode = 5 (MULT)
#   operand_a = 1
#   operand_b = 15
#   result = 15
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 1 and 15 is correct!
# 
# Read from register location 10: 
#   opcode = 7 (MOD)
#   operand_a = 9
#   operand_b = 9
#   result = 0
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 9 and 9 is correct!
# 
# Read from register location 24: 
#   opcode = 5 (MULT)
#   operand_a = 1
#   operand_b = 15
#   result = 15
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 1 and 15 is correct!
# 
# Read from register location 18: 
#   opcode = 0 (ZERO)
#   operand_a = -12
#   operand_b = 3
#   result = 0
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -12 and 3 is correct!
# 
# Read from register location 17: 
#   opcode = 3 (ADD)
#   operand_a = -2
#   operand_b = 4
#   result = 2
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -2 and 4 is correct!
# 
# Read from register location 25: 
#   opcode = 7 (MOD)
#   operand_a = -1
#   operand_b = 5
#   result = -1
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -1 and 5 is correct!
# 
# 
# ***********************************************************
# ***      THIS IS A SELF-CHECKING TESTBENCH.             ***
# ***********************************************************
# 
# 
# *******************************************************
# ***                  FINAL REPORT                   ***
# *******************************************************
# Total number of errors encountered: 3
# Oops! There were 3 errors detected.
# *******************************************************
# 
# ** Note: $finish    : ../lab01_testbench-interface/instr_register_test.sv(97)
#    Time: 656 ns  Iteration: 1  Instance: /top/test
# End time: 09:36:57 on Mar 27,2024, Elapsed time: 0:00:01
# Errors: 3, Warnings: 2

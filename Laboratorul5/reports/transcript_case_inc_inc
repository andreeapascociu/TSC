# 1
# Model Technology ModelSim - Intel FPGA Edition vlog 10.5b Compiler 2016.10 Oct  5 2016
# Start time: 21:54:30 on Apr 02,2024
# vlog -sv -timescale 1ps/1ps -work work -f sources.txt 
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling package instr_register_test_sv_unit
# -- Compiling module instr_register_test
# -- Importing package instr_register_pkg
# -- Compiling module top
# 
# Top level modules:
# 	top
# End time: 21:54:30 on Apr 02,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vsim -novopt -quiet -nocoverage "+notimingchecks" "+nowarnTSCALE" -sva top -GWR_NR=50 -GRD_NR=50 -Gwrite_order=0 -Gread_order=0 
# Start time: 21:54:30 on Apr 02,2024
# ** Warning: (vsim-3017) ../lab01_testbench-interface/top.sv(37): [TFMPC] - Too few port connections. Expected 10, found 9.
#    Time: 0 ps  Iteration: 0  Instance: /top/dut File: ../lab_dut/instr_register.sv
# ** Warning: (vsim-3722) ../lab01_testbench-interface/top.sv(37): [TFMPC] - Missing connection for port 'rez'.
# 
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH.                 ***
# ***********************************************************
# 
# Reseting the instruction register...
# Resetting the signals
# 
# Writing values to register stack...
# Test: opcode=1, operand_a=-12, operand_b=7 at time 36000.
# Writing to register location 0: 
#   opcode = 1 (PASSA)
#   operand_a = -12
#   operand_b = 7
# 
# Test: opcode=0, operand_a=-9, operand_b=1 at time 46000.
# Writing to register location 1: 
#   opcode = 0 (ZERO)
#   operand_a = -9
#   operand_b = 1
# 
# Test: opcode=7, operand_a=-15, operand_b=8 at time 56000.
# Writing to register location 2: 
#   opcode = 7 (MOD)
#   operand_a = -15
#   operand_b = 8
# 
# Test: opcode=5, operand_a=-8, operand_b=7 at time 66000.
# Writing to register location 3: 
#   opcode = 5 (MULT)
#   operand_a = -8
#   operand_b = 7
# 
# Test: opcode=3, operand_a=-9, operand_b=5 at time 76000.
# Writing to register location 4: 
#   opcode = 3 (ADD)
#   operand_a = -9
#   operand_b = 5
# 
# Test: opcode=4, operand_a=5, operand_b=3 at time 86000.
# Writing to register location 5: 
#   opcode = 4 (SUB)
#   operand_a = 5
#   operand_b = 3
# 
# Test: opcode=3, operand_a=3, operand_b=12 at time 96000.
# Writing to register location 6: 
#   opcode = 3 (ADD)
#   operand_a = 3
#   operand_b = 12
# 
# Test: opcode=6, operand_a=12, operand_b=3 at time 106000.
# Writing to register location 7: 
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 3
# 
# Test: opcode=1, operand_a=3, operand_b=14 at time 116000.
# Writing to register location 8: 
#   opcode = 1 (PASSA)
#   operand_a = 3
#   operand_b = 14
# 
# Test: opcode=1, operand_a=-2, operand_b=9 at time 126000.
# Writing to register location 9: 
#   opcode = 1 (PASSA)
#   operand_a = -2
#   operand_b = 9
# 
# Test: opcode=7, operand_a=9, operand_b=9 at time 136000.
# Writing to register location 10: 
#   opcode = 7 (MOD)
#   operand_a = 9
#   operand_b = 9
# 
# Test: opcode=3, operand_a=9, operand_b=7 at time 146000.
# Writing to register location 11: 
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 7
# 
# Test: opcode=5, operand_a=7, operand_b=3 at time 156000.
# Writing to register location 12: 
#   opcode = 5 (MULT)
#   operand_a = 7
#   operand_b = 3
# 
# Test: opcode=7, operand_a=3, operand_b=5 at time 166000.
# Writing to register location 13: 
#   opcode = 7 (MOD)
#   operand_a = 3
#   operand_b = 5
# 
# Test: opcode=0, operand_a=-11, operand_b=15 at time 176000.
# Writing to register location 14: 
#   opcode = 0 (ZERO)
#   operand_a = -11
#   operand_b = 15
# 
# Test: opcode=6, operand_a=15, operand_b=0 at time 186000.
# Writing to register location 15: 
#   opcode = 6 (DIV)
#   operand_a = 15
#   operand_b = 0
# 
# Test: opcode=4, operand_a=0, operand_b=14 at time 196000.
# Writing to register location 16: 
#   opcode = 4 (SUB)
#   operand_a = 0
#   operand_b = 14
# 
# Test: opcode=3, operand_a=-2, operand_b=4 at time 206000.
# Writing to register location 17: 
#   opcode = 3 (ADD)
#   operand_a = -2
#   operand_b = 4
# 
# Test: opcode=0, operand_a=-12, operand_b=3 at time 216000.
# Writing to register location 18: 
#   opcode = 0 (ZERO)
#   operand_a = -12
#   operand_b = 3
# 
# Test: opcode=4, operand_a=-13, operand_b=8 at time 226000.
# Writing to register location 19: 
#   opcode = 4 (SUB)
#   operand_a = -13
#   operand_b = 8
# 
# Test: opcode=1, operand_a=-8, operand_b=12 at time 236000.
# Writing to register location 20: 
#   opcode = 1 (PASSA)
#   operand_a = -8
#   operand_b = 12
# 
# Test: opcode=1, operand_a=-4, operand_b=1 at time 246000.
# Writing to register location 21: 
#   opcode = 1 (PASSA)
#   operand_a = -4
#   operand_b = 1
# 
# Test: opcode=1, operand_a=-15, operand_b=1 at time 256000.
# Writing to register location 22: 
#   opcode = 1 (PASSA)
#   operand_a = -15
#   operand_b = 1
# 
# Test: opcode=7, operand_a=1, operand_b=1 at time 266000.
# Writing to register location 23: 
#   opcode = 7 (MOD)
#   operand_a = 1
#   operand_b = 1
# 
# Test: opcode=5, operand_a=1, operand_b=15 at time 276000.
# Writing to register location 24: 
#   opcode = 5 (MULT)
#   operand_a = 1
#   operand_b = 15
# 
# Test: opcode=7, operand_a=-1, operand_b=5 at time 286000.
# Writing to register location 25: 
#   opcode = 7 (MOD)
#   operand_a = -1
#   operand_b = 5
# 
# Test: opcode=4, operand_a=5, operand_b=7 at time 296000.
# Writing to register location 26: 
#   opcode = 4 (SUB)
#   operand_a = 5
#   operand_b = 7
# 
# Test: opcode=4, operand_a=-9, operand_b=4 at time 306000.
# Writing to register location 27: 
#   opcode = 4 (SUB)
#   operand_a = -9
#   operand_b = 4
# 
# Test: opcode=5, operand_a=4, operand_b=12 at time 316000.
# Writing to register location 28: 
#   opcode = 5 (MULT)
#   operand_a = 4
#   operand_b = 12
# 
# Test: opcode=3, operand_a=12, operand_b=5 at time 326000.
# Writing to register location 29: 
#   opcode = 3 (ADD)
#   operand_a = 12
#   operand_b = 5
# 
# Test: opcode=4, operand_a=-11, operand_b=11 at time 336000.
# Writing to register location 30: 
#   opcode = 4 (SUB)
#   operand_a = -11
#   operand_b = 11
# 
# Test: opcode=0, operand_a=11, operand_b=12 at time 346000.
# Writing to register location 31: 
#   opcode = 0 (ZERO)
#   operand_a = 11
#   operand_b = 12
# 
# Test: opcode=2, operand_a=-4, operand_b=8 at time 356000.
# Writing to register location 0: 
#   opcode = 2 (PASSB)
#   operand_a = -4
#   operand_b = 8
# 
# Test: opcode=2, operand_a=8, operand_b=10 at time 366000.
# Writing to register location 1: 
#   opcode = 2 (PASSB)
#   operand_a = 8
#   operand_b = 10
# 
# Test: opcode=6, operand_a=-6, operand_b=2 at time 376000.
# Writing to register location 2: 
#   opcode = 6 (DIV)
#   operand_a = -6
#   operand_b = 2
# 
# Test: opcode=1, operand_a=2, operand_b=14 at time 386000.
# Writing to register location 3: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 14
# 
# Test: opcode=4, operand_a=14, operand_b=9 at time 396000.
# Writing to register location 4: 
#   opcode = 4 (SUB)
#   operand_a = 14
#   operand_b = 9
# 
# Test: opcode=7, operand_a=-7, operand_b=12 at time 406000.
# Writing to register location 5: 
#   opcode = 7 (MOD)
#   operand_a = -7
#   operand_b = 12
# 
# Test: opcode=1, operand_a=12, operand_b=7 at time 416000.
# Writing to register location 6: 
#   opcode = 1 (PASSA)
#   operand_a = 12
#   operand_b = 7
# 
# Test: opcode=5, operand_a=-9, operand_b=1 at time 426000.
# Writing to register location 7: 
#   opcode = 5 (MULT)
#   operand_a = -9
#   operand_b = 1
# 
# Test: opcode=6, operand_a=-15, operand_b=13 at time 436000.
# Writing to register location 8: 
#   opcode = 6 (DIV)
#   operand_a = -15
#   operand_b = 13
# 
# Test: opcode=3, operand_a=-3, operand_b=6 at time 446000.
# Writing to register location 9: 
#   opcode = 3 (ADD)
#   operand_a = -3
#   operand_b = 6
# 
# Test: opcode=3, operand_a=6, operand_b=3 at time 456000.
# Writing to register location 10: 
#   opcode = 3 (ADD)
#   operand_a = 6
#   operand_b = 3
# 
# Test: opcode=1, operand_a=-13, operand_b=11 at time 466000.
# Writing to register location 11: 
#   opcode = 1 (PASSA)
#   operand_a = -13
#   operand_b = 11
# 
# Test: opcode=7, operand_a=11, operand_b=1 at time 476000.
# Writing to register location 12: 
#   opcode = 7 (MOD)
#   operand_a = 11
#   operand_b = 1
# 
# Test: opcode=5, operand_a=-15, operand_b=15 at time 486000.
# Writing to register location 13: 
#   opcode = 5 (MULT)
#   operand_a = -15
#   operand_b = 15
# 
# Test: opcode=1, operand_a=15, operand_b=13 at time 496000.
# Writing to register location 14: 
#   opcode = 1 (PASSA)
#   operand_a = 15
#   operand_b = 13
# 
# Test: opcode=7, operand_a=-3, operand_b=1 at time 506000.
# Writing to register location 15: 
#   opcode = 7 (MOD)
#   operand_a = -3
#   operand_b = 1
# 
# Test: opcode=0, operand_a=1, operand_b=15 at time 516000.
# Writing to register location 16: 
#   opcode = 0 (ZERO)
#   operand_a = 1
#   operand_b = 15
# 
# Test: opcode=6, operand_a=15, operand_b=0 at time 526000.
# Writing to register location 17: 
#   opcode = 6 (DIV)
#   operand_a = 15
#   operand_b = 0
# 
# 
# Reading back the same register locations written...
# Read from register location 0: 
#   opcode = 2 (PASSB)
#   operand_a = -4
#   operand_b = 8
#   result = 8
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -4 and 8 is correct!
# 
# Read from register location 1: 
#   opcode = 2 (PASSB)
#   operand_a = 8
#   operand_b = 10
#   result = 10
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 8 and 10 is correct!
# 
# Read from register location 2: 
#   opcode = 6 (DIV)
#   operand_a = -6
#   operand_b = 2
#   result = -3
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -6 and 2 is correct!
# 
# Read from register location 3: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 14
#   result = 2
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 2 and 14 is correct!
# 
# Read from register location 4: 
#   opcode = 4 (SUB)
#   operand_a = 14
#   operand_b = 9
#   result = 5
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 14 and 9 is correct!
# 
# Read from register location 5: 
#   opcode = 7 (MOD)
#   operand_a = -7
#   operand_b = 12
#   result = -7
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -7 and 12 is correct!
# 
# Read from register location 6: 
#   opcode = 1 (PASSA)
#   operand_a = 12
#   operand_b = 7
#   result = 12
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 12 and 7 is correct!
# 
# Read from register location 7: 
#   opcode = 5 (MULT)
#   operand_a = -9
#   operand_b = 1
#   result = -9
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -9 and 1 is correct!
# 
# Read from register location 8: 
#   opcode = 6 (DIV)
#   operand_a = -15
#   operand_b = 13
#   result = -1
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -15 and 13 is correct!
# 
# Read from register location 9: 
#   opcode = 3 (ADD)
#   operand_a = -3
#   operand_b = 6
#   result = 3
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -3 and 6 is correct!
# 
# Read from register location 10: 
#   opcode = 3 (ADD)
#   operand_a = 6
#   operand_b = 3
#   result = 9
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 6 and 3 is correct!
# 
# Read from register location 11: 
#   opcode = 1 (PASSA)
#   operand_a = -13
#   operand_b = 11
#   result = -13
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -13 and 11 is correct!
# 
# Read from register location 12: 
#   opcode = 7 (MOD)
#   operand_a = 11
#   operand_b = 1
#   result = 0
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 11 and 1 is correct!
# 
# Read from register location 13: 
#   opcode = 5 (MULT)
#   operand_a = -15
#   operand_b = 15
#   result = -225
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -15 and 15 is correct!
# 
# Read from register location 14: 
#   opcode = 1 (PASSA)
#   operand_a = 15
#   operand_b = 13
#   result = 15
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 15 and 13 is correct!
# 
# Read from register location 15: 
#   opcode = 7 (MOD)
#   operand_a = -3
#   operand_b = 1
#   result = 0
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -3 and 1 is correct!
# 
# Read from register location 16: 
#   opcode = 0 (ZERO)
#   operand_a = 1
#   operand_b = 15
#   result = 0
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 1 and 15 is correct!
# 
# Read from register location 17: 
#   opcode = 6 (DIV)
#   operand_a = 15
#   operand_b = 0
#   result = x
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# ** Error: The value is incorrect, 15 and 0 should be 0 predicted!
#    Time: 724 ns  Scope: top.test.check_result File: ../lab01_testbench-interface/instr_register_test.sv Line: 229
# Read from register location 18: 
#   opcode = 0 (ZERO)
#   operand_a = -12
#   operand_b = 3
#   result = 0
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -12 and 3 is correct!
# 
# Read from register location 19: 
#   opcode = 4 (SUB)
#   operand_a = -13
#   operand_b = 8
#   result = -21
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -13 and 8 is correct!
# 
# Read from register location 20: 
#   opcode = 1 (PASSA)
#   operand_a = -8
#   operand_b = 12
#   result = -8
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -8 and 12 is correct!
# 
# Read from register location 21: 
#   opcode = 1 (PASSA)
#   operand_a = -4
#   operand_b = 1
#   result = -4
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -4 and 1 is correct!
# 
# Read from register location 22: 
#   opcode = 1 (PASSA)
#   operand_a = -15
#   operand_b = 1
#   result = -15
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -15 and 1 is correct!
# 
# Read from register location 23: 
#   opcode = 7 (MOD)
#   operand_a = 1
#   operand_b = 1
#   result = 0
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 1 and 1 is correct!
# 
# Read from register location 24: 
#   opcode = 5 (MULT)
#   operand_a = 1
#   operand_b = 15
#   result = 15
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 1 and 15 is correct!
# 
# Read from register location 25: 
#   opcode = 7 (MOD)
#   operand_a = -1
#   operand_b = 5
#   result = -1
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -1 and 5 is correct!
# 
# Read from register location 26: 
#   opcode = 4 (SUB)
#   operand_a = 5
#   operand_b = 7
#   result = -2
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 5 and 7 is correct!
# 
# Read from register location 27: 
#   opcode = 4 (SUB)
#   operand_a = -9
#   operand_b = 4
#   result = -13
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -9 and 4 is correct!
# 
# Read from register location 28: 
#   opcode = 5 (MULT)
#   operand_a = 4
#   operand_b = 12
#   result = 48
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 4 and 12 is correct!
# 
# Read from register location 29: 
#   opcode = 3 (ADD)
#   operand_a = 12
#   operand_b = 5
#   result = 17
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 12 and 5 is correct!
# 
# Read from register location 30: 
#   opcode = 4 (SUB)
#   operand_a = -11
#   operand_b = 11
#   result = -22
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -11 and 11 is correct!
# 
# Read from register location 31: 
#   opcode = 0 (ZERO)
#   operand_a = 11
#   operand_b = 12
#   result = 0
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 11 and 12 is correct!
# 
# Read from register location 0: 
#   opcode = 2 (PASSB)
#   operand_a = -4
#   operand_b = 8
#   result = 8
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -4 and 8 is correct!
# 
# Read from register location 1: 
#   opcode = 2 (PASSB)
#   operand_a = 8
#   operand_b = 10
#   result = 10
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 8 and 10 is correct!
# 
# Read from register location 2: 
#   opcode = 6 (DIV)
#   operand_a = -6
#   operand_b = 2
#   result = -3
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -6 and 2 is correct!
# 
# Read from register location 3: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 14
#   result = 2
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 2 and 14 is correct!
# 
# Read from register location 4: 
#   opcode = 4 (SUB)
#   operand_a = 14
#   operand_b = 9
#   result = 5
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 14 and 9 is correct!
# 
# Read from register location 5: 
#   opcode = 7 (MOD)
#   operand_a = -7
#   operand_b = 12
#   result = -7
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -7 and 12 is correct!
# 
# Read from register location 6: 
#   opcode = 1 (PASSA)
#   operand_a = 12
#   operand_b = 7
#   result = 12
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 12 and 7 is correct!
# 
# Read from register location 7: 
#   opcode = 5 (MULT)
#   operand_a = -9
#   operand_b = 1
#   result = -9
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -9 and 1 is correct!
# 
# Read from register location 8: 
#   opcode = 6 (DIV)
#   operand_a = -15
#   operand_b = 13
#   result = -1
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -15 and 13 is correct!
# 
# Read from register location 9: 
#   opcode = 3 (ADD)
#   operand_a = -3
#   operand_b = 6
#   result = 3
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -3 and 6 is correct!
# 
# Read from register location 10: 
#   opcode = 3 (ADD)
#   operand_a = 6
#   operand_b = 3
#   result = 9
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 6 and 3 is correct!
# 
# Read from register location 11: 
#   opcode = 1 (PASSA)
#   operand_a = -13
#   operand_b = 11
#   result = -13
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -13 and 11 is correct!
# 
# Read from register location 12: 
#   opcode = 7 (MOD)
#   operand_a = 11
#   operand_b = 1
#   result = 0
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 11 and 1 is correct!
# 
# Read from register location 13: 
#   opcode = 5 (MULT)
#   operand_a = -15
#   operand_b = 15
#   result = -225
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -15 and 15 is correct!
# 
# Read from register location 14: 
#   opcode = 1 (PASSA)
#   operand_a = 15
#   operand_b = 13
#   result = 15
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 15 and 13 is correct!
# 
# Read from register location 15: 
#   opcode = 7 (MOD)
#   operand_a = -3
#   operand_b = 1
#   result = 0
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -3 and 1 is correct!
# 
# Read from register location 16: 
#   opcode = 0 (ZERO)
#   operand_a = 1
#   operand_b = 15
#   result = 0
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between 1 and 15 is correct!
# 
# Read from register location 17: 
#   opcode = 6 (DIV)
#   operand_a = 15
#   operand_b = 0
#   result = x
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# ** Error: The value is incorrect, 15 and 0 should be 0 predicted!
#    Time: 1044 ns  Scope: top.test.check_result File: ../lab01_testbench-interface/instr_register_test.sv Line: 229
# Read from register location 18: 
#   opcode = 0 (ZERO)
#   operand_a = -12
#   operand_b = 3
#   result = 0
# Value of op_a stored correctly
# Value of op_b stored correctly
# Value of opc stored correctly
# The operation between -12 and 3 is correct!
# 
# 
# ***********************************************************
# ***      THIS IS A SELF-CHECKING TESTBENCH.             ***
# ***********************************************************
# 
# 
# *******************************************************
# ***                  FINAL REPORT                   ***
# *******************************************************
# Total number of errors encountered: 2
# Oops! There were 2 errors detected.
# *******************************************************
# 
# ** Note: $finish    : ../lab01_testbench-interface/instr_register_test.sv(113)
#    Time: 1056 ns  Iteration: 1  Instance: /top/test
# End time: 21:54:30 on Apr 02,2024, Elapsed time: 0:00:00
# Errors: 2, Warnings: 2
